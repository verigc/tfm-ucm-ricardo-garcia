Comment: "Orquestador principal para la ingesta de datos de TFM UCM"
StartAt: getHealthData
States:
  getHealthData:
    Type: Task
    Resource: "arn:aws:states:::lambda:invoke"
    Parameters:
      FunctionName: "${LambdaGetHealthDataArn}"
      Payload:
        "$": "$"
    Retry:
      - ErrorEquals:
          - "Lambda.ServiceException"
          - "Lambda.AWSLambdaException"
          - "Lambda.SdkClientException"
        IntervalSeconds: 2
        MaxAttempts: 3
        BackoffRate: 2
    Next: get_ree_data

  get_ree_data:
    Type: Task
    Resource: "arn:aws:states:::lambda:invoke"
    Parameters:
      FunctionName: "${LambdaGetReeDataArn}"
      Payload:
        "$": "$"
    Retry:
      - ErrorEquals:
          - "Lambda.ServiceException"
          - "Lambda.AWSLambdaException"
          - "Lambda.SdkClientException"
        IntervalSeconds: 2
        MaxAttempts: 3
        BackoffRate: 2
    Next: Obtener lista de sensores

  Obtener lista de sensores:
    Type: Task
    Resource: "arn:aws:states:::lambda:invoke"
    Parameters:
      FunctionName: "${LambdaGetOpenAqSensorsArn}"
      Payload:
        "$": "$"
    Retry:
      - ErrorEquals:
          - "Lambda.ServiceException"
          - "Lambda.AWSLambdaException"
          - "Lambda.SdkClientException"
        IntervalSeconds: 2
        MaxAttempts: 3
        BackoffRate: 2
    Next: DividirSensoresEnLotes

  DividirSensoresEnLotes:
    Type: Task
    Resource: "arn:aws:states:::lambda:invoke"
    Parameters:
      FunctionName: "${LambdaDividirSensoresEnLotesArn}"
      Payload:
        "$": "$"
    Retry:
      - ErrorEquals:
          - "Lambda.ServiceException"
          - "Lambda.AWSLambdaException"
          - "Lambda.SdkClientException"
        IntervalSeconds: 2
        MaxAttempts: 3
        BackoffRate: 2
    Next: Map

  Map:
    Type: Map
    ItemProcessor:
      ProcessorConfig:
        Mode: INLINE
      StartAt: OpenAQStepFunction
      States:
        OpenAQStepFunction:
          Type: Task
          Resource: "arn:aws:states:::states:startExecution.sync:2"
          Parameters:
            StateMachineArn: "${StateMachineOpenAQA Arn}"
            Input:
              "$": "$"
          End: true
    MaxConcurrency: 1
    Next: Datalake

  Datalake:
    Type: Task
    Resource: "arn:aws:states:::glue:startJobRun.sync" # Usamos .sync para esperar a que termine
    Parameters:
      JobName: "${GlueJobName}"
    End: true